#!/usr/bin/env python3
# coding: utf-8

'''
    latexmake
    ~~~~~~~~~

    Python module for latexmk.py which completely automates
    the process of generating a LaTeX document.

    :copyright: (c) 2012-2013 by Marc Schlaich and Jan Kanis
    :license: GPL version 3 or later, see LICENSE for more details.
'''

from os import path
from io import open
from collections import defaultdict
from itertools import chain
from subprocess import Popen, call
from textwrap import dedent
from hashlib import sha256

import argparse
import subprocess
import errno
import filecmp
import fnmatch
import logging
import os
import re
import shutil
import sys
import time
import copy
import errno

try:
    from inotify.watcher import Watcher
    from inotify import _inotify as inotify
except ImportError:
    Watcher = None

try:
    import notify2
    from dbus.exceptions import DBusException
except ImportError:
    notify2 = None

__author__ = 'Marc Schlaich'
__version__ = '0.5dev'
__license__ = 'GPL3+'


BIB_PATTERN = re.compile(r'\\bibdata\{(.*)\}')
CITE_PATTERN = re.compile(r'\\citation\{(.*)\}')
BIBCITE_PATTERN = re.compile(r'\\bibcite\{(.*)\}\{(.*)\}')
BIBENTRY_PATTERN = re.compile(r'@.*\{(.*),\s')
ERROR_PATTERN = re.compile(r'(?:^! (.*\nl\..*)$)|(?:^! (.*)$)|'
                            '(No pages of output.)', re.M)
LATEX_RERUN_PATTERN = re.compile('|'.join(
                        [r'LaTeX Warning: Reference .* undefined',
                         r'LaTeX Warning: There were undefined references\.',
                         r'LaTeX Warning: Label\(s\) may have changed\.',
                         r'.*Warning:.*Rerun to get.*', 
                         r'No file .*(\.toc|\.lof)\.',
                        # This pattern can occur when using XeLaTeX. It is only 
                        # present in stderr and not in the log because it is
                        # not generated by XeLaTeX itself but by a helper 
                        # program that is called from XeLaTeX. This happens 
                        # when non-utf8 clean .aux or .toc files generated by 
                        # PDFLaTeX are read in by XeLaTeX. Rerunning resolves 
                        # it.
                         r'\*\* WARNING \*\* Failed to convert input string to UTF16',
                        ]))
TEXLIPSE_MAIN_PATTERN = re.compile(r'^mainTexFile=(.*)(?:\.tex)$', re.M)

LATEX_FLAGS = ['-interaction=nonstopmode', '-shell-escape', '--synctex=1']
MAX_RUNS = 4
NO_LATEX_ERROR = (
    'Could not run command \'%s\'. '
    'Is your latex distribution under your PATH?'
)

log = logging.getLogger(__name__)
log.addHandler(logging.StreamHandler()) 



"""
The decision tree we implement in ChangeTracker.ischanged:

Cached? ......... file exists? .... mtime changed? .. size changed? ... renew? .......... [store all; True]
     |               \                  \                     \             \.......else. [True]
     |                \                  \                     \..else. content changed?  renew? ....... [store all; True]
     |                 \                  \                                     \             \....else. [True]
     |                  \                  \                                     \..else. renew? ....... [store all; False]
     |                   \                  \                                                 \....else. [False]
     |                    \                  \..else. [False]
     \                     \..else. cached = 0? ..... renew? .......... [store 0; False]
      \                                     \             \.......else. [False]
       \                                     \..else. renew? .......... [store 0; True]
        \                                                 \.......else. [store 0; True]
         \..else. renew? .......... file exists? .... [store all; ifunknown]
                      \                      \..else. [store 0; ifunknown]
                       \......else. [ifunknown]

(Straight branch is true, 'else' is false. 'store all' is to store an updated changedata, 'store 0' is to store
a changedata(0, 0, ''), indicating that the file was checked but not found)
"""

changedata = collections.namedtuple('changedata', 'mtime size sha'.split())
class ChangeTracker:
    """Track whether a file has changed based on mtime, size and a hash of the
    data. This class is robust against rewriting a file with the same contents
    it already had, as LaTeX is prone to do."""

    def __init__(self):
        self.cache = {}
        # self.lastseen = {}

    def remember(self, name):
        '''remember file's content and mtime.'''
        self.ischanged(name, renew=True)

    def forget(self, pattern):
        '''Forget all cached files that match regular expression `pattern`. 
        `pattern` must match the entire filename.'''
        for k in list(self.cache.keys()):
            m = re.match(pattern, k)
            if m and m.end() == len(k):
                del self.cache[k]
                # try: 
                #     del self.lastseen[k]
                # except KeyError: pass

    def ischanged(self, name, *, ifunknown=True, renew=False):
        '''
        Return whether the file's content has changed. If `renew` is True, 
        renew the remembered data. If the file was not remembered before, 
        return `ifunknown` (default: True). The amount of I/O done is 
        kept as small as possible.

        Setting `renew` to True increases efficiency if ischanged is going to
        be called multiple times even if file changes are not expected, because  
        this will store the file's mtime and thereby potentially prevent the  
        file's sha hash from being calculated multiple times. 
        '''
        # Lots of combinations to consider: (data in cache) X renew X (file exists)
        # and we should not do unnecessary file accesses. 

        mtime, size, sha = self.cache.get(name, (None, None, None))
        if size is None and not renew: 
            # file not remembered before
            return ifunknown
        try:
            stat = os.stat(name)
            if stat.st_mtime == mtime:
                return False  # not changed, so no update needed

            # If new_size differs the file has definately changed, if they're
            # the same we can't be sure and need to check the file contents. 
            if stat.st_size != size and not renew:
                return True 

            with open(name, 'rb') as f:
                new_sha = sha256(f.read()).hexdigest()
            if renew:
                self.cache[name] = changedata(stat.st_mtime, stat.st_size, new_sha)
            return ifunknown if sha is None else new_sha != sha

        except EnvironmentError as e:
            if e.errno != errno.ENOENT:
                raise
            # file does not exist (anymore)
            null_data = changedata(0, 0, '')
            if renew:
                self.cache[name] = null_data
            return ifunknown if size is None else (mtime, size, sha) != null_data


class LatexMaker (object):
    '''
    Main class for generation process.
    '''
    def __init__(self, project_name, opt):
        self.opt = opt
        self.project_name = project_name
        self.log = log
        self.tracker = ChangeTracker()

        if self.opt.command:
            self.latex_cmd = self.opt.command
        elif self.opt.pdf:
            self.latex_cmd = 'pdflatex'
        else:
            self.latex_cmd = 'latex'

        self.out = ''
        self.glossaries = dict()
        self.latex_run_counter = 0
        self.bib_file = ''

        self._read_latex_files()

    def _read_latex_files(self):
        '''
        Check if some latex output files exist
        before first latex run, process them and return
        the generated data.

            - Parsing *.aux for citations counter and
              existing glossaries.
            - Getting a hash of files to detect changes.
                - *.toc file
                - all available glossaries files
        '''
        if os.path.isfile(self.project_name+'.aux'):
            self.cite_counter = self.generate_citation_counter()
            self._read_glossaries()
        else:
            self.cite_counter = {self.project_name+'.aux':
                                defaultdict(int)}

        self._is_toc_changed()

        gloss_files = set()
        for gloss in self.glossaries:
            ext = self.glossaries[gloss][1]
            filename = '{}.{}'.format(self.project_name, ext)
            self.tracker.remember(filename)
            gloss_files.add(filename)
        self.gloss_files = gloss_files


    def read_aux(self):
        try:
            with open(self.project_name+'.aux') as f:
                self.aux = f.read()
        except EnvironmentError:
            self.aux = ''


    def is_toc_changed(self, *, store=False):
        '''Test if the *.toc file has changed during the latex run.'''
        return self.tracker.ischanged(self.project_name+'.toc', renew=store)


    def need_bibtex_run(self, *, store=False):
        '''
        Determine if you need to run "bibtex".
        1. Check if *.bib exists.
        2. Check latex output for hints.
        3. Examine *.bib for changes.
        '''
        match = BIB_PATTERN.search(self.aux)
        if not match:
            return False
        else:
            self.bib_file = match.group(1)

        if not os.path.isfile(self.bib_file+'.bib'):
            self.log.warning('Could not find *.bib file.')
            return False

        if ('No file {}.bbl'.format(self.project_name) in self.out
            or re.search('LaTeX Warning: Citation .* undefined', self.out)):
            return True

        return self.tracker.ischanged(self.bib_file+'.bib', renew=store)

    def bibtex_run(self):
        '''
        Start bibtex run.
        '''
        self.log.info('Running bibtex...')
        try:
            with open(os.devnull, 'w') as null:
                self.log.debug('Running bibtex '+self.project_name)
                out = sys.stdout if self.opt.texoutput else null
                call(['bibtex', self.project_name], stdout=out)
        except EnvironmentError as e:
            _fatal_error(NO_LATEX_ERROR % 'bibtex', error=e)

    def store_bibtex_state(self)
        self.tracker.remember(self.bib_file+'.bib')

    def generate_citation_counter(self):
        '''
        Generate dictionary with the number of citations in all
        included files. If this changes after the first latex run,
        you have to run "bibtex". The returned dict has this type:
        dict(str -> defaultdict(str -> int))
        '''
        cite_counter = dict()
        cite_counter[self.project_name+'.aux'] = self._count_citations(self.aux)

        for match in re.finditer(r'\\@input\{(.*\.aux)\}', self.aux):
            filename = match.groups()[0]
            try:
                counter = self._count_citations(filename)
                cite_counter[filename] = counter
            except EnvironmentError:
                pass

        return cite_counter

    def _count_citations(self, aux_file):
        '''
        Counts the citations in an aux-file.

        @return: defaultdict(int) - {citation_name: number, ...}
        '''
        counter = defaultdict(int)
        with open(aux_file) as fobj:
            content = fobj.read()

        for match in CITE_PATTERN.finditer(content):
            name = match.groups()[0]
            counter[name] += 1

        return counter


    def need_makeglossaries_run(self, *, store=False):
        '''
        Read all existing glossaries in the main aux-file. Return True if there 
        are changes in any of the glossaries and they need to be regenerated. 
        '''
        filename = self.project_name+'.aux'
        with open(filename) as fobj:
            main_aux = fobj.read()

        anychanged = False
        pattern = br'\\@newglossary\{(.*)\}\{.*\}\{.*\}\{(.*)\}'
        for match in re.finditer(pattern, main_aux):
            name, ext_o = match.groups()
            anychanged |= self.tracker.ischanged(name+ext_o, renew=store)
        return anychanged

    def makeglossaries_run(self):
        '''
        Check for each glossary if it has to be regenerated
        with "makeindex".

        @return: True if "makeindex" was called.
        '''
        anychanged = any((self.tracker.ischanged(gloss) for gloss in self.glossaries))

        if not anychanged:
            return False

        try:
            with open(os.devnull, 'w') as null:
                out = sys.stdout if self.opt.texoutput else null
                ret = call(['makeglossaries']+self.opt.glossariesoptions, stdout=out)
        except EnvironmentError as e:
            _fatal_error(NO_LATEX_ERROR % 'makeglossaries', error=e)

        if not self.opt.texoutput: out.close()
        if ret != 0:
            self.log.error('makeglossaries exited with error code {}'.format(ret))

        return True



    def check_errors(self):
        '''
        Check if errors occured during a latex run by
        scanning the output.
        '''
        errors = ERROR_PATTERN.findall(self.out)
        # "errors" is a list of tuples
        if not errors:
            return True
        else:
            self.log.error('! Errors occurred:')

            error = '\n'.join(
                [error.replace('\r', '').strip() for error
                in chain(*errors) if error.strip()]
            )
            
            self.log.error(error)

            self.log.error('! See "{}.log" for details.'.format(self.project_name))

            if self.opt.exit_on_error:
                raise LatexMkError('{}\nSee "{}.log" for details.'.format(
                                    error, self.project_name))
            return False

    def latex_run(self):
        '''
        Start latex run.
        '''
        self.out = ''
        self.log.info('Running {}...'.format(self.latex_cmd))
        cmd = [self.latex_cmd]
        cmd.extend(LATEX_FLAGS + ['-jobname', self.project_name])
        cmd.extend(self.opt.texoptions)
        cmd.append('{}.tex'.format(self.project_name))
        self.log.debug('Running '+' '.join(cmd))

        # Not all relevant errors end up in the log, so we parse stderr. See 
        # the definition of LATEX_RERUN_PATTERN for details. 
        try:
            proc = Popen(cmd, 
                         stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                         close_fds=True, bufsize=1024)
            if self.opt.texoutput:
                r = proc.stdout.read(1024)
                while r:
                    sys.stdout.buffer.write(r)
                    self.out += r.decode('utf-8', 'replace')
                    r = proc.stdout.read(1024)
            else:
                self.out = proc.stdout.read().decode('utf-8', 'replace')
            proc.wait()
        except EnvironmentError as e:
            _fatal_error(NO_LATEX_ERROR % self.latex_cmd, error=e)

        self.latex_run_counter += 1
        return self.check_errors()

    def open_preview(self):
        '''
        Try to open a preview of the generated document.
        '''
        self.log.info('Opening preview...')
        if self.opt.pdf:
            ext = 'pdf'
        else:
            ext = 'dvi'
        filename = self.project_name+ext
        if sys.platform == 'win32':
            try:
                os.startfile(filename)
            except EnvironmentError:
                self.log.error(
                    'Preview-Error: Extension .%s is not linked to a '
                    'specific application!' % ext
                )
        else:
            try:
                # xdg-open works on most Linuxes, open on OSX
                cmd = 'open' if sys.platform == 'darwin' else 'xdg-open'
                call([cmd, filename])
            except EnvironmentError as e:
                self.log.error('Preview-Error: opening previewer failed with '
                    'the following message:\n' + str(e))

    def need_latex_rerun(self):
        '''
        Test for all rerun patterns if they match the output.
        '''
        match = LATEX_RERUN_PATTERN.search(self.out)
        if match:
            self.log.debug('rerun pattern found: "{}"'.format(match.group()))
            return True
        return False

    def run(self):
        '''Run the LaTeX compilation.'''
        # store files
        self.old_dir = []
        if self.opt.clean:
            self.old_dir = os.listdir('.')

        ok = self.latex_run()
        self.read_glossaries()

        gloss_changed = self.need_makeindex()
        if gloss_changed or self._is_toc_changed():
            ok = self.latex_run()


        changed = True
        while changed and self.latex_run_counter < MAX_RUNS:
            ok = self.latex_run()
            changed = False
            if self.is_toc_changed():
                changed = True
            if self.need_bibtex():
                self.bibtex_run()
                changed = True
            if self.need_makeindex():
                self.makeindex_runs()
                changed = True
            

            
            self.need_latex_rerun() or gloss_changed:
            if self._need_bib_run():
                self.bibtex_run()
            gloss_changed = self.makeindex_runs()
            ok = self.latex_run()
            if self.latex_run_counter >= MAX_RUNS:
                break

        if self.opt.check_cite:
            cites = set()
            with open(self.project_name+'.aux') as fobj:
                aux_content = fobj.read()

            for match in BIBCITE_PATTERN.finditer(aux_content):
                name = match.groups()[0]
                cites.add(name)

            with open('%s.bib' % self.bib_file) as fobj:
                bib_content = fobj.read()
            for match in BIBENTRY_PATTERN.finditer(bib_content):
                name = match.groups()[0]
                if name not in cites:
                    self.log.warn('Bib entry not cited: "%s"' % name)

        if self.opt.clean:
            ending = '.dvi'
            if self.opt.pdf:
                ending = '.pdf'

            for fname in os.listdir('.'):
                if not (fname in self.old_dir or fname.endswith(ending)):
                    try:
                        os.remove(fname)
                    except IOError:
                        pass

        if self.opt.preview:
            self.open_preview()

        if ok:
            msg = "{}.tex compiled".format(self.project_name)
            self.log.info(msg)
            if self.opt.notify:
                notify(msg, icon='face-smile')


class PollEvent (object):
    def __init__(self, name, mask):
        self.name = name
        self.mask = mask


class PollWatcher (object):
    """
    A fallback watcher that conforms to the interface of 
    inotify.watcher.Watcher but uses polling.
    """

    infinity = float('inf')

    def __init__(self, sleep=2):
        self.watchlist = {}
        self.removed = set()
        self.sleeptime = sleep

    def add(self, pth):
        self.watchlist[pth] = self.inifinity

    def path(self, pth):
        if pth in self.watchlist:
            return (0, inotify.IN_MODIFY)
        else:
            return None

    def remove_path(self, pth):
        del self.watchlist[pth]
        self.removed.discard(pth)

    def watches(self):
        for path in self.watchlist.keys():
            yield path, 0, inotify.IN_MODIFY

    def read(self, buf=None):
        """A simple polling loop checking file's mtime"""
        events = []
        while not events:
            for f,t in self.watchlist.items():
                try:
                    mtime = os.stat(f).st_mtime
                    if mtime > t:
                        events += PollEvent(f, inotify.IN_MODIFY)
                        self.watchlist[f] = mtime
                except EnvironmentError:
                    events += PollEvent(f, inotify.IN_DELETE_SELF)
                    self.removed.add(f)
            if buf == 0:
                break
            time.sleep(self.sleeptime)
        return events


class LatexWatcher (object):
    def __init__(self, project_name, args):
        self.project_name = project_name
        self.args = args
        self.log = log
        if not '-recorder' in args.texoptions:
            self.args.texoptions.insert(0, '-recorder')

        if self.args.watchmethod == 'inotify' and Watcher:
            self.watcher = Watcher()
            self.log.debug("loaded inotify watcher")
        else:
            self.watcher = PollWatcher()
            self.log.info("inotify not available, falling back on polling watcher")

        self.add_watch(args.filename)
        for w in args.watchfiles:
            self.add_watch(w)

        maker_args = copy.copy(self.args)
        maker_args.preview = False
        maker_args.exit_on_error = True
        self.maker = LatexMaker(self.project_name, maker_args)
        
    def run(self):
        try:
            self.build()
            # Open preview just once
            if self.args.preview:
                self.maker.open_preview()
            while 1:
                self.build()
        except KeyboardInterrupt:
            self.log.info('')
            self.log.info("exiting")

    def update_files(self):
        old_watches = [path for path, wd, mask in self.watcher.watches()]
        with open(self.project_name+'.fls') as record:
            for l in record.readlines():
                l = l.rstrip('\n')
                if not l.startswith('INPUT '):
                    continue
                if self.args.texonly and not l.endswith('.tex'):
                    continue
                pth = l.split(' ', 1)[1]
                if not self.args.watch_system:
                    # currently unix only. What would the windows version look like?
                    spath = path.abspath(pth).lstrip(path.pathsep)
                    if spath.startswith(('usr', 'lib', 'etc')):
                        continue
                if not self.watcher.path(pth):
                    # new file, add it to the watchlist
                    self.add_watch(pth)
                else:
                    try:
                        # It's still a current watch
                        old_watches.remove(pth)
                    except ValueError:
                        # sometimes the same file is read multiple times
                        pass
        # remove files that are no longer a dependency
        if self.args.filename in old_watches:
            raise LatexMkError(
              "Filename {} is no longer present in LaTeX's list of inputs"
              .format(self.args.filename))
        for pth in old_watches:
            self.remove_watch(pth)


    def add_watch(self, pth):
        self.log.debug("adding watch for "+pth)
        self.watcher.add(pth, 
            inotify.IN_MODIFY | inotify.IN_DELETE_SELF | inotify.IN_MOVE_SELF)

    def remove_watch(self, pth):
        self.log.debug("removing watch for "+pth)
        self.watcher.remove_path(pth)

    def wait(self):
        '''wait for changes to files'''
        events = self.watcher.read()
        # wait a little since there are often multiple events close together
        time.sleep(0.1)
        events += self.watcher.read(0)
        self.log.debug("events:"+''.join(
            ("\n {} {}".format(e.path, '|'.join(inotify.decode_mask(e.mask))) for e in events)))
        self.log.info("file(s) changed: "+' '.join((e.path for e in events)))

    def build(self):
        try:
            self.maker.run()
        except LatexMkError as e:
            if self.args.exit_on_error:
                raise
        self.update_files()
        self.wait()
        

class LatexMkError (Exception):
    pass


class NotifyHandler (logging.Handler):
    '''
    A Logging handler that sends messages to the Gnome notification system
    using the notify2 library. Default level is WARN. 
    '''
    def __init__(self, level=logging.WARN, *args):
        logging.Handler.__init__(self, *args, level=level)
        self.notification = notify2.Notification('')
        self.timestamp = 0
        self.errors = []

    def emit(self, record):
        now = time.time()
        if now - self.timestamp > 10:
            del self.errors[:]
        self.errors.append(record.getMessage())
        self.notification.update(
            'LatexMk error:', '\n'.join(self.errors), icon='dialog-error')
        self.notification.show()
        self.timestamp = now


def _fatal_error(msg, error=None):
    '''
    Log the error to the logger and raise a LatexMkError
    '''
    log.error(msg)
    raise LatexMkError(msg) from error

def _parse_texlipse_config():
    '''
    Read the project name from the texlipse
    config file ".texlipse".
    '''
    # If Eclipse's workspace refresh, the
    # ".texlipse"-File will be newly created,
    # so try again after short sleep if
    # the file is still missing.
    if not os.path.isfile('.texlipse'):
        time.sleep(0.1)

    try:
        with open('.texlipse') as fobj:
            content = fobj.read()
    except EnvironmentError as e:
        _fatal_error('Could not open .texlipse file: ' + str(e), e)

    match = TEXLIPSE_MAIN_PATTERN.search(content)
    if match:
        project_name = match.groups()[0]
        log.info('Found inputfile in ".texlipse": {}.tex'.format(project_name))
        return project_name
    else:
        _fatal_error('Parsing .texlipse file failed.')


def projectname(name):
    '''
    return the actual project name given a .tex or .texlipse filename
    '''
    if name == '.texlipse':
        name = _parse_texlipse_config()
        log.info('Project name is "{}"'.format(name))

    if name.endswith('.tex'):
        name = name[:-4]

    return name


def notify(sum, msg='', icon=''):
    '''
    Display a notification. 
    For some standard icon names, see
    http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html#names
    '''
    if notify2:
        notify2.Notification(sum, msg, icon=icon).show()


def main():
    '''
    Set up "argparse" and pass the options to
    a new instance of L{LatexMaker}.
    '''

    # Read description from doc. Add a space because argparse removes empty 
    # trailing lines from the description. 
    doc_text = dedent(__doc__.split('\n#', 1)[0]) + ' '

    parser = argparse.ArgumentParser(description=doc_text, formatter_class=
                              argparse.RawDescriptionHelpFormatter)
    parser.add_argument('filename', default=None, nargs='?', 
                      help='''input filename. If omitted the current directory
                            will be searched for a single *.tex file. Specify 
                            ".texlipse" to find the .tex file from a *.texlipse
                            project file.''')
    parser.add_argument('-f', dest='filename',
                      help='''The .tex file to watch. Same as the program's 
                          first argument.''')
    parser.add_argument('-c', '--clean',
                      action='store_true', dest='clean', default=False,
                      help='Clean all temporary files after converting.')
    parser.add_argument('-q', '--quiet',
                      action='count', dest='quiet', default=0, 
                      help='Don\'t print status messages to stdout. Specify '
                          'twice not to show error messages either.')
    parser.add_argument('-d', '--debug', 
                      action='store_const', dest='quiet', const=-1, default=0, 
                      help='Show debugging information.')
    parser.add_argument('-n', '--no-exit',
                      action='store_false', dest='exit_on_error', default=True,
                      help='Don\'t exit if error occurs.')
    parser.add_argument('-N', '--notify', 
                      action='store_true', dest='notify', default=False, 
                      help='''Notify through the desktop environment if a 
                          rebuild is finished and if errors occured. Currently 
                          only available on Gnome.''')
    parser.add_argument('-p', '--preview',
                      action='store_true', dest='preview', default=False,
                      help='Try to open preview of generated document.')
    parser.add_argument('--dvi', action='store_false', dest='pdf',
                      default=True, help='use "latex" instead of pdflatex')
    parser.add_argument('-t', '--tex-command', dest='command', 
                      help='The latex compiler command to use.')
    parser.add_argument('--check-cite', action='store_true', dest='check_cite',
                      default=False,
                      help='Check bibtex file for uncited entries.')
    parser.add_argument('-P', '--texoutput', action='store_true', default=False,
                      help='Show the output of the called commands')
    parser.add_argument('--pvc', '--preview-continuously', 
                      dest='continuous', action='store_true', default=False, 
                      help='''preview continuously. Keep running, watching the 
                          .tex file and any .tex dependencies for changes 
                          and rebuilding the document on changes. ''')
    parser.add_argument('-w', '--watch', 
                      dest='watch', action='store_true', default=False, 
                      help='''Turn on all options useful for running in the 
                          background and building the latex file on changes. 
                          This implies --pvc, -n and -N (if available).''')
    parser.add_argument('--watch-system', action='store_true', default=False,
                      help='''Also watch system files. By default files under 
                          /usr and /etc are not watched for changes.''')
    parser.add_argument('--watch-all', 
                      action='store_false', default=True, dest='texonly',
                      help='''Also watch imported files that do not end in .tex
                          for changes.''')
    parser.add_argument('--latex-options', 
                      action='append', dest='texoptions', nargs='+', default=[],
                      help='Additional options to pass to latex.')
    parser.add_argument('--makeglossaries-options', 
                      action='append', dest='glossariesoptions', nargs='+', default=[],
                      help="Additional options to pass to `makeglossaries`.")
    parser.add_argument('--watchfile', 
                      dest='watchfiles', nargs='+', default=[],
                      help='Also watch these files for changes.')
    parser.add_argument('--watchmethod', 
                      nargs=1, choices=['inotify', 'poll'], default='inotify',
                      help='Specify the method used to detect file changes.')
    parser.add_argument('--version', action='version', 
                      version='%(prog)s {}'.format(__version__))

    args, rest = parser.parse_known_args()
    if rest:
        parser.error(
            'unrecognized arguments: {}. Specify at most one filename'
                .format(' '.join(('"{}"'.format(r) for r in rest))))
    if args.filename == None:
        tex_files = fnmatch.filter(os.listdir('.'), '*.tex')
        if len(tex_files) == 1:
            args.filename = tex_files[0]
        elif len(tex_files) == 0:
            parser.error('could not find one *.tex file in current directory')
        else:
            parser.error('multiple *.tex files in current directory, specify only one')

    if args.texoptions:
        args.texoptions = [op for list in args.texoptions for op in list]
  
    args.verbosity = \
        {-1: logging.DEBUG, 0: logging.INFO, 
         1: logging.ERROR, 2: logging.FATAL}[min(args.quiet, 2)]
    log.setLevel(args.verbosity)

    log.debug('arguments: '+str(args))

    if args.watch:
        args.continuous = True
        args.exit_on_error = False
        if notify2:
            args.notify = True
    
    if args.notify:
        if notify2 is None:
            parser.error("Unable to use desktop notification ('-N', '--notify'). "
                "Could not load package 'notify2'.")
        try:
            notify2.init('LatexMk')
            log.addHandler(NotifyHandler())
        except DBusException as e:
            log.error('Failed to initialize DBus: '+str(e))
            parser.error("Unable to use desktop notification ('-N', '--notify'). "
                "Failed to initialize DBus.")

    try:
        if args.continuous:
            LatexWatcher(projectname(args.filename), args).run()
        else:
            LatexMaker(projectname(args.filename), args).run()
    except LatexMkError as e:
        # The exceptions message is already logged
        log.error('! Exiting...')
        sys.exit(1)

if __name__ == '__main__':
    main()
